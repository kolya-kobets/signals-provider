@startuml
!theme toy

!unquoted procedure $element($alias, $description="", $label="", $technology="", $size=12, $colour="green")
rectangle $alias as "
<color:$colour>alias <<$alias>> </color>
 =>
$description"
!endprocedure

package "Core" {
  package BaseTypes
  {
    enum ReadStatus {
      BAD_SIGNAL
      OK
    }

    struct Frame {
    + frame_counter : std::uint16_t
    + source_id: std::uint8_t
    + payload : std::variant<std::uint8_t, std::int16_t, std::int32_t, IEEE_754_float>
    }

    struct Signal {
    + frame_counter : std::uint16_t
    + source_id: std::uint8_t
    + signal : IEEE_754_float normalized
    }

    struct FrameHeader <<packed, aligned(1)>> {
    + magic_word : char[4] = WORD
    + frame_counter : std::uint16_t
    + source_id : std::uint8_t
    + payload_type : std::uint8_t
    + payload_size : std::uint32_t
    }

  }

  interface IDataSource {
  +read(data : char* , size: int) : int
  }

  class DataSource {
  +read(data : char* , size: int) : int
  }

  $element(FrameHandler, "std::function<void(frame : const Frame&)>", $size=10, $technology="c++")

  class BufferedReader {
  +FrameReader(source: IDataSource&)
  +read(data : char* , size: int) : int
  +rewind(offset: size_t) : void
  +operator[](ind: size_t) : char
  -m_source : IDataSource&
  }

  class FrameReader {
  +FrameReader(source: IDataSource&, handler : FrameHandler&)
  -m_frame_handler : FrameHandler
  -m_thread : std::thread
  -m_source : IDataSource&
  }

  $element(SignalHandler, "std::function<void(frame : const Signal&, status : ReadStatus)>", $size=10, $technology="c++")

  class FrameProcessor {
  +FrameProcessor(source_id : std::uint8_t, handler : const SignalHandler&)
  +process_frame(output : Frame&) : void
  -m_thread : std::thread
  -m_handler : SignalHandler
  }


  class Converter {
  +convert(input : Frame) : Signal
  }

  ' Client listener '
  interface ISignalReceiver {
  +process(signal: const Signal&, status: ReadStatus): void
  }

  class SignalStorage {
  +process(signal: const Signal&, status: ReadStatus): void
  }

  class SignalLogger {
  +process(signal: const Signal&, status: ReadStatus): void
  }

  class SignalProvider {
  +registerClient(client: IClient*):void
  }
}


package Simulation
{
class TestDataSource {
+read(data : char* , size: int) : int
}
}

IDataSource <|.. DataSource
IDataSource <|.. TestDataSource
BufferedReader --o IDataSource
FrameReader --* BufferedReader
FrameReader -up-o FrameHandler
FrameProcessor ..> Converter
FrameProcessor -up-o SignalHandler
SignalProvider "1" --* "1 for each source" FrameProcessor
SignalProvider --* FrameReader
SignalProvider --o IDataSource
SignalProvider "1" --o "n" ISignalReceiver
SignalProvider ..|> SignalHandler
SignalProvider ..|> FrameHandler
SignalStorage .up.|> ISignalReceiver
SignalLogger .up.|> ISignalReceiver

@enduml
