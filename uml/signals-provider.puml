@startuml
!theme toy

!unquoted procedure $element($alias, $description="", $label="", $technology="", $size=12, $colour="green")
rectangle $alias as "
<color:$colour>alias <<$alias>> </color>
 =>
$description"
!endprocedure

package "Core" {
  package BaseTypes
  {
    enum ReadStatus {
      BAD_FRAME
      STREAM_END
    }

    ' (alignas(1)) in gccc __attribute__((packed, aligned(1)))
    struct RawFrame  {
    + magic_word : char[4]
    + frame_counter : std::uint16_t
    + source_id: std::uint8_t
    + payload_type: std::uint8_t
    + payload_size: std::uint32_t
    + payload: std::byte[1]
    }

    struct Frame {
    + frame_counter : std::uint16_t
    + source_id: std::uint8_t
    + payload : std::variant<std::uint8_t, std::int16_t, std::int32_t, IEEE_754_float>
    }

    struct NormalizedSignal {
    + frame_counter : std::uint16_t
    + source_id: std::uint8_t
    + signal : IEEE_754_float normalized
    }
  }

  interface IDataSource {
  +read(data : char* , size: int) : int
  }

  class DataSource {
  +read(data : char* , size: int) : int
  }

  $element(FrameHandler, "std::function<void(frame : const Frame&, status : ReadStatus)>", $size=10, $technology="c++")

  class FrameReader {
  +FrameReader(handler : FrameHandler&)
  -read_next(output : Frame&) : ReadStatus
  -m_frame_handler : FrameHandler
  -m_thread : std::thread
  -m_source : IDataSource&
  }

  $element(SignalHandler, "std::function<void(frame : const NormalizedSignal&, status : ReadStatus)>", $size=10, $technology="c++")

  class FrameProcessor {
  +FrameProcessor(handler : SignalHandler&)
  +process_next(output : Frame&) : void
  -m_thread : std::thread
  -m_handler : SignalHandler
  }


  class Converter {
  +convert(input : Frame, status: ReadStatus) : NormalizedSignal
  }

  ' Client listener
  interface IClient {
  +process(signal: const NormalizedSignal&, source_id : std::uint16_t): void
  }

  class SignalStorage {
  +process(signal: const NormalizedSignal&, source_id : std::uint16_t): void
  }

  class Statistics
  {
  +add_frame(frame: const Frame&, ReadStatus : status) : void
  }

  class Provider {
  +registerClient(client: IClient*):void
  }
}


package Simulation
{
class TestDataSource {
+read(data : char* , size: int) : int
}
}

IDataSource <|.. DataSource
IDataSource <|.. TestDataSource
FrameReader -up-o IDataSource
FrameReader -up-o FrameHandler
FrameProcessor ..> Converter
FrameProcessor -up-o SignalHandler
Provider "1" --* "1 for each source" FrameProcessor
Provider --* FrameReader
Provider --* Statistics
Provider --o IDataSource
Provider "1" --o "n" IClient
Provider ..|> SignalHandler
Provider ..|> FrameHandler
SignalStorage .up.|> IClient
@enduml
